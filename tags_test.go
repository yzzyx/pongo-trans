// Code generated by mockery v1.0.0. DO NOT EDIT.

package trans

import (
	"strconv"

	mock "github.com/stretchr/testify/mock"
)

type TestTranslator struct{}

func (t *TestTranslator) Get(ctx TransCtx, str string, values ...interface{}) string {
	return ctx.Domain + ":" + ctx.Language + ":" + str
}

func (t *TestTranslator) GetC(ctx TransCtx, str string, transCtx string, values ...interface{}) string {
	return ctx.Domain + ":" + ctx.Language + ":" + transCtx + ":" + str
}

func (t *TestTranslator) GetN(ctx TransCtx, str string, plural string, count int, values ...interface{}) string {
	return ctx.Domain + ":" + ctx.Language + ":" + str + ":" + plural + ":" + strconv.Itoa(count)
}

func (t *TestTranslator) GetNC(ctx TransCtx, str string, plural string, count int, transCtx string, values ...interface{}) string {
	return ctx.Domain + ":" + ctx.Language + ":" + transCtx + ":" + str + ":" + plural + ":" + strconv.Itoa(count)
}

// MockTranslator is an autogenerated mock type for the Translator type
type MockTranslator struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, str, values
func (_m *MockTranslator) Get(ctx TransCtx, str string, values ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, ctx, str)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(TransCtx, string, ...interface{}) string); ok {
		r0 = rf(ctx, str, values...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetC provides a mock function with given fields: ctx, str, transCtx, values
func (_m *MockTranslator) GetC(ctx TransCtx, str string, transCtx string, values ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, ctx, str, transCtx)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(TransCtx, string, string, ...interface{}) string); ok {
		r0 = rf(ctx, str, transCtx, values...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetN provides a mock function with given fields: ctx, str, plural, count, values
func (_m *MockTranslator) GetN(ctx TransCtx, str string, plural string, count int, values ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, ctx, str, plural, count)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(TransCtx, string, string, int, ...interface{}) string); ok {
		r0 = rf(ctx, str, plural, count, values...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNC provides a mock function with given fields: ctx, str, plural, count, transCtx, values
func (_m *MockTranslator) GetNC(ctx TransCtx, str string, plural string, count int, transCtx string, values ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, ctx, str, plural, count, transCtx)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(TransCtx, string, string, int, string, ...interface{}) string); ok {
		r0 = rf(ctx, str, plural, count, transCtx, values...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
